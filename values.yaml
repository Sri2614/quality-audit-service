# Default values for quality-audit-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
appname: caliber
image:
  repository: gcr.io/caliber-dev-254513/quality-audit
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "caliber-quality-audit-service"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: caliber-quality-audit-service.revaturelabs.com
      paths:
        - /

  tls: 
   - secretName: revaturelabs-cert
     hosts:
       - caliber-quality-audit-service.revaturelabs.com

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


caliber-quality-audit-postgres-service:
  enabled: true
  global:
    postgresql: {}


  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.7.0-debian-10-r0
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistryKeySecretName

    debug: false
  # nameOverride:
  fullnameOverride: caliber-qa-db
  volumePermissions:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/minideb
      tag: buster

      pullPolicy: Always
    
      # pullSecrets:
      #   - myRegistryKeySecretName

    securityContext:
      runAsUser: 0

  # schedulerName:

  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001


  serviceAccount:
    enabled: false
    ## Name of an already existing service account. Setting this value disables the automatic service account creation.
    # name:

  replication:
    enabled: false
    user: repl_user
    password: repl_password
    slaveReplicas: 2
    ## Set synchronous commit mode: on, off, remote_apply, remote_write and local
    ## ref: https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-WAL-LEVEL
    synchronousCommit: "on"
    ## From the number of `slaveReplicas` defined above, set the number of those that will have synchronous replication
    ## NOTE: It cannot be > slaveReplicas
    numSynchronousReplicas: 1
    ## Replication Cluster application name. Useful for defining multiple replication policies
    applicationName: caliber-qa-db-app

  ## PostgreSQL admin password (used when `postgresqlUsername` is not `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-user-on-first-run (see note!)
  # postgresqlPostgresPassword:

  ## PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: postgres

  ## PostgreSQL password
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  # postgresqlPassword:

  ## PostgreSQL password using existing secret
  ## existingSecret: secret

  ## Mount PostgreSQL secret as a file instead of passing environment variable
  # usePasswordFile: false

  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: caliber-qa-db

  ## PostgreSQL data dir
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
  ##
  postgresqlDataDir: /bitnami/postgresql/data

  # extraEnv:
  extraEnv: []

  # extraEnvVarsCM:

  # postgresqlInitdbArgs:

  # postgresqlInitdbWalDir:


  # postgresqlConfiguration:

  # postgresqlExtendedConf:

  ## PostgreSQL client authentication configuration
  ## Specify content for pg_hba.conf
  ## Default: do not create pg_hba.conf
  ## Alternatively, you can put your pg_hba.conf under the files/ directory
  # pgHbaConfiguration: |-
  #   local all all trust
  #   host all all localhost trust
  #   host mydatabase mysuser 192.168.0.0/24 md5

  ## ConfigMap with PostgreSQL configuration
  ## NOTE: This will override postgresqlConfiguration and pgHbaConfiguration
  # configurationConfigMap:

  ## ConfigMap with PostgreSQL extended configuration
  # extendedConfConfigMap:

  # initdbScripts:
  #   my_init_script.sh: |
  #      #!/bin/sh
  #      echo "Do something."

  # initdbScriptsConfigMap:

  # initdbScriptsSecret:

  ## Specify the PostgreSQL username and password to execute the initdb scripts
  # initdbUser:
  # initdbPassword:

  ## Optional duration in seconds the pod needs to terminate gracefully.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
  ##
  # terminationGracePeriodSeconds: 30

  ## PostgreSQL service configuration
  service:
    ## PosgresSQL service type
    type: ClusterIP
    # clusterIP: None
    port: 5432

    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:

    ## Provide any additional annotations which may be required.
    ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
    annotations: {}
    ## Set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    # loadBalancerIP:

    ## Load Balancer sources
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ##
    # loadBalancerSourceRanges:
    # - 10.10.10.0/24

  ## Start master and slave(s) pod(s) without limitations on shm memory.
  ## By default docker and containerd (and possibly other container runtimes)
  ## limit `/dev/shm` to `64M` (see e.g. the
  ## [docker issue](https://github.com/docker-library/postgres/issues/416) and the
  ## [containerd issue](https://github.com/containerd/containerd/issues/3654),
  ## which could be not enough if PostgreSQL uses parallel workers heavily.
  ##
  shmVolume:
    ## Set `shmVolume.enabled` to `true` to mount a new tmpfs volume to remove
    ## this limitation.
    ##
    enabled: true
    ## Set to `true` to `chmod 777 /dev/shm` on a initContainer.
    ## This option is ingored if `volumePermissions.enabled` is `false`
    ##
    chmod:
      enabled: true


  persistence:
    enabled: true
    mountPath: /bitnami/postgresql
    subPath: ""
    storageClass: "standard"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}

  ## updateStrategy for PostgreSQL StatefulSet and its slaves StatefulSets
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  updateStrategy:
    type: RollingUpdate

  ##
  ## PostgreSQL Master parameters
  ##
  master:

    nodeSelector: {}
    affinity: {}
    tolerations: []
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    priorityClassName: ""
    extraInitContainers: |
    # - name: do-something
    #   image: busybox
    #   command: ['do', 'something']
    ## Additional PostgreSQL Master Volume mounts
    ##
    extraVolumeMounts: []
    ## Additional PostgreSQL Master Volumes
    ##
    extraVolumes: []

  ##
  ## PostgreSQL Slave parameters
  ##
  slave:
    nodeSelector: {}
    affinity: {}
    tolerations: []
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    priorityClassName: ""
    extraInitContainers: |
    # - name: do-something
    #   image: busybox
    #   command: ['do', 'something']
    ## Additional PostgreSQL Slave Volume mounts
    ##
    extraVolumeMounts: []
    ## Additional PostgreSQL Slave Volumes
    ##
    extraVolumes: []

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 250m

  networkPolicy:
    ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
    ##
    enabled: false

    ## The Policy model to apply. When set to false, only pods with the correct
    ## client label will have network access to the port PostgreSQL is listening
    ## on. When true, PostgreSQL will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true


  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
